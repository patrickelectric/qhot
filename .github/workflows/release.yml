name: Releases

on:
  workflow_dispatch:
  pull_request:
  push:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: macos-latest
          DEPLOY_PATH: qhot-*.dmg
        - os: ubuntu-latest
          DEPLOY_PATH: qhot-*.AppImage
        - os: windows-latest
          DEPLOY_PATH: qhot-*.zip

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: 6.4.2
          host: linux
          target: desktop
          dir: ${{ runner.temp }}
          modules: qtcharts
          setup-python: true

      - name: Setup tmate session
        if: runner.os == 'Windows'
        uses: mxschmitt/action-tmate@v3

      - name: Configure
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build
        if: runner.os == 'macOS' || runner.os == 'Linux'
        run: |
          cmake --build build --parallel --config Release

      - name: Build
        if: runner.os == 'Windows'
        run: |
          cmake --build build --parallel --target ALL_BUILD --config Release

      - name: Install LinuxDeploy
        uses: miurahr/install-linuxdeploy-action@v1
        if: runner.os == 'Linux'
        with:
          plugins: qt appimage

      - name: Create dmg
        if: runner.os == 'macOS'
        run: |
          macdeployqt qhot.app/ -qmldir=../qml -dmg
          ls
          ls qhot.app

      - name: Create Appimage
        if: runner.os == 'Linux'
        run: |
          # Install lib for linuxdeploy
          sudo apt install --yes libfuse2 libxkbcommon-x11-0
          export QML_SOURCES_PATHS=$PWD/qml
          linuxdeploy-x86_64.AppImage --desktop-file=deploy/qhot.desktop --executable=build/src/qhot --appdir=build/src --plugin=qt --output=appimage --verbosity=3 --icon-file=deploy/icon.png

      - name: Build Windows
        if: runner.os == 'Windows'
        env:
          OPENSSL: 'C:\Program Files\OpenSSL\bin'
          SYSTEM32: 'C:\windows\system32'
          SYSTEM32_DLLS: 'VCRUNTIME140.dll VCRUNTIME140_1.dll MSVCP140.dll MSVCP140_1.dll'
        run: |
          mkdir output
          cp build/Release/pingviewer.exe output/pingviewer.exe
          if (($env:OPENSSL) -and (Test-Path $env:OPENSSL -pathType container)) {
            Copy-Item ${env:OPENSSL}\*.dll -Destination output -Force
          }
          foreach ($I in (${env:SYSTEM32_DLLS} -split ' ')) { copy ${env:SYSTEM32}\$I output\ }
          windeployqt --qmldir qml --release output/pingviewer.exe --verbose=2
          ls
          ls output

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: qhot-${{ runner.os }}
          path: ${{ matrix.DEPLOY_PATH }}
